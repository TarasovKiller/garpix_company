# Generated by Django 4.2 on 2024-03-14 12:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import garpix_user.mixins.models.confirm.code_length_mixin
import garpix_user.utils.validators
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('garpix_user', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='GarpixUserPasswordConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_length', models.PositiveIntegerField(default=12, verbose_name='Минимальная длина пароля')),
                ('min_digits', models.PositiveIntegerField(default=2, verbose_name='Минимальное количество цифр')),
                ('min_chars', models.PositiveIntegerField(default=2, verbose_name='Минимальное количество букв')),
                ('min_uppercase', models.PositiveIntegerField(default=1, verbose_name='Минимальное количество заглавных букв')),
                ('min_special_symbols', models.PositiveIntegerField(default=1, verbose_name='Минимальное количество спец.символов')),
                ('available_attempt', models.IntegerField(default=-1, help_text='-1 если ограничение не требуется', verbose_name='Количество допустимых неуспешных попыток входа')),
                ('password_history', models.IntegerField(default=-1, help_text='-1 если ограничение не требуется', verbose_name='Количество последних паролей, которые нельзя использовать при смене')),
                ('password_validity_period', models.IntegerField(default=-1, help_text='-1 если ограничение не требуется', verbose_name='Срок действия пароля (в днях)')),
                ('password_first_change', models.BooleanField(default=False, verbose_name='Обязательная смена пароля при первом входе')),
                ('password_validity_inform_days', models.IntegerField(default=-1, help_text='-1 если отправка уведомлений не требуется', verbose_name='За сколько дней начинать отправлять уведомление об истечении срока пароля')),
                ('access_token_ttl_seconds', models.IntegerField(default=0, help_text='0 если ограничение не требуется', verbose_name='Время жизни авторизационного токена')),
                ('refresh_token_ttl_seconds', models.IntegerField(default=0, help_text='0 если ограничение не требуется', verbose_name='Время жизни рефреш токена')),
                ('access_tokens_count', models.IntegerField(default=-1, help_text='-1 если отправка уведомлений не требуется', validators=[garpix_user.utils.validators.PositiveWithInfValidator(limit_value=[])], verbose_name='Количество хранимых access-токенов (самый старый будет удален)')),
            ],
            options={
                'verbose_name': 'Настройки безопасности входа',
                'verbose_name_plural': 'Настройки безопасности входа',
            },
        ),
        migrations.CreateModel(
            name='ReferralType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Referral way title')),
                ('referral_hash', models.CharField(max_length=32)),
            ],
        ),
        migrations.AlterField(
            model_name='accesstoken',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_tokens', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AlterField(
            model_name='refreshtoken',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refresh_tokens', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('restore_password_confirm_code', models.CharField(blank=True, max_length=15, null=True, verbose_name='Код восстановления пароля')),
                ('is_restore_code_confirmed', models.BooleanField(blank=True, default=False, verbose_name='Код восстановления подтвержден')),
                ('restore_date', models.DateTimeField(null=True, verbose_name='Дата отправки кода восстановления')),
                ('restore_by', models.CharField(choices=[('phone', 'Номер телефона'), ('email', 'Адрес электронной почты')], default='email', max_length=5)),
                ('phone_confirmation_code', models.CharField(blank=True, max_length=15, null=True, verbose_name='Phone confirmation code')),
                ('phone_code_send_date', models.DateTimeField(blank=True, null=True, verbose_name='Code sent date')),
                ('phone_confirmed_date', models.DateTimeField(blank=True, null=True, verbose_name='Date phone was confirmed')),
                ('new_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True, verbose_name='New phone number')),
                ('email_confirmation_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Email confirmation code')),
                ('email_code_send_date', models.DateTimeField(blank=True, null=True, verbose_name='Code sent date')),
                ('email_confirmed_date', models.DateTimeField(blank=True, null=True, verbose_name='Date email was confirmed')),
                ('new_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='New email')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('is_email_confirmed', models.BooleanField(default=False, verbose_name='Email confirmed')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, default='', max_length=128, region=None, verbose_name='Phone number')),
                ('is_phone_confirmed', models.BooleanField(default=False, verbose_name='Phone number confirmed')),
                ('token_number', models.CharField(blank=True, max_length=256, null=True, verbose_name='user token')),
                ('recognized', models.PositiveIntegerField(choices=[(0, 'Undefined'), (1, 'Guest'), (2, 'Registered')], default=0, help_text='Indicates the state in which the user is recognized.', verbose_name='Type')),
                ('last_access', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Last entrance')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'System user',
                'verbose_name_plural': 'System users',
            },
            bases=(garpix_user.mixins.models.confirm.code_length_mixin.CodeLengthMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Password history',
                'verbose_name_plural': 'Password history',
            },
        ),
        migrations.CreateModel(
            name='ReferralUserLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referral_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='garpix_user.referraltype', verbose_name='Where did the user come from')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='garpix_user.usersession', verbose_name='User')),
            ],
            options={
                'unique_together': {('user', 'referral_type')},
            },
        ),
    ]
